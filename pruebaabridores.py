import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from datetime import datetime
import statsapi
from unidecode import unidecode

# Setup de fecha y archivo
today = datetime.now().strftime("%Y-%m-%d")
url_base = f"https://baseballsavant.mlb.com/probable-pitchers/?date={today}"
output_file = f"forma_pitchers_{today}.txt"

# Configurar navegador headless
options = Options()
options.add_argument("--headless=new")
options.add_argument("--disable-gpu")
driver = webdriver.Chrome(options=options)
driver.get(url_base)
time.sleep(5)

# Paso 1: Extraer nombres de pitchers desde Savant
pitchers = []
elements = driver.find_elements(By.CSS_SELECTOR, 'a.matchup-link')
for el in elements:
    name = el.text.strip()
    link = el.get_attribute('href')
    if name and "/player_matchup?" in link:
        pitchers.append(unidecode(name))

driver.quit()

# Paso 2: Clasificaci√≥n por estado
clasificados = {
    "üî• Gran forma": [],
    "‚úÖ Forma s√≥lida": [],
    "‚ö†Ô∏è Riesgo de regresi√≥n": [],
    "üö´ Forma d√©bil": [],
    "‚ùå Menos de 3 salidas": [],
    "‚ö†Ô∏è Error accediendo a log": [],
    "‚ùì No encontrado": [],
}

def analizar_forma_pitcher(nombre):
    try:
        player_id = statsapi.lookup_player(nombre)[0]['id']
    except IndexError:
        clasificados["‚ùì No encontrado"].append(f"{nombre}")
        return

    try:
        game_logs = statsapi.get('person', {
            'personId': player_id,
            'hydrate': 'stats(group=[pitching],type=[gameLog],season=2025)'
        })
        pitching_logs = game_logs['people'][0]['stats'][0]['splits']
    except Exception:
        clasificados["‚ö†Ô∏è Error accediendo a log"].append(f"{nombre}")
        return

    if len(pitching_logs) < 3:
        clasificados["‚ùå Menos de 3 salidas"].append(f"{nombre}")
        return

    pitching_logs.sort(key=lambda x: x['date'], reverse=True)
    ultimos = pitching_logs[:3]
    ERs = [int(j['stat']['earnedRuns']) for j in ultimos]
    detalle = ", ".join(f"{er} ER" for er in ERs)

    if all(er == 0 for er in ERs):
        clasificados["üî• Gran forma"].append(f"{nombre} ({detalle})")
    elif ERs[0] == 0 and (ERs[1] >= 3 or ERs[2] >= 3):
        clasificados["‚ö†Ô∏è Riesgo de regresi√≥n"].append(f"{nombre} ({detalle})")
    elif ERs[0] <= 2 and ERs[1] <= 2 and ERs[2] <= 3:
        clasificados["‚úÖ Forma s√≥lida"].append(f"{nombre} ({detalle})")
    else:
        clasificados["üö´ Forma d√©bil"].append(f"{nombre} ({detalle})")

# Paso 3: Ejecutar an√°lisis
for nombre in pitchers:
    analizar_forma_pitcher(nombre)

# Paso 4: Exportar resultados
with open(output_file, "w", encoding="utf-8") as f:
    f.write(f"üéØ An√°lisis de forma ‚Äì Pitchers del {today}\n\n")
    for categoria in [
        "üî• Gran forma", "‚úÖ Forma s√≥lida", "‚ö†Ô∏è Riesgo de regresi√≥n",
        "üö´ Forma d√©bil", "‚ùå Menos de 3 salidas",
        "‚ö†Ô∏è Error accediendo a log", "‚ùì No encontrado"
    ]:
        if clasificados[categoria]:
            f.write(f"{categoria} ({len(clasificados[categoria])}):\n")
            for p in clasificados[categoria]:
                f.write(f"‚Ä¢ {p}\n")
            f.write("\n")

print(f"‚úÖ An√°lisis completado y guardado en: {output_file}")
